

		-------Comandos para sincronizar un repo local con repo remoto.-------

-.git status  //Vemos el estatus del repo.

-.git init   //Inicializamos, solo aplica si es un directorio que no se a echo repositorio

-.git add .  //Agregamos todos los cambios echos a los archivos o archivos nuevos añididos lo subimos a StagingArea.

-.git commit -m "mensaje"  //Mandamos el primer commit con un mensaje lo mas descriptivo posible.

-.git branch -M main  //Nos aseguramos que estamos posicionados en la rama main.

-.git remote add origin "URL de repositorio"  //Seleccionamos el link del repositorio remoto.

-.git push -u origin main  //Subimos los cambios y todo loq ue esta en el local al repositorio remoto.


-.rm -rf .git //comando para eliminar la carpeta .git que convierte en repositorio cualquier carpeta.



				----------Comandos basicos en Git------------

-.touch "archivo.extencion" //Creamos diferentes tipos de archivos nuevos dependiendo su extencion

-.touch "Achivo.txt" && "archivo.html" && "archivo.css" && "archivo.js" //Podemos crear muchos archivos a la vez


				----------------Ramas (Branch)------------------
	
-.git branch  //Sirve para ver cuantas ramas tenemos en nuestro repo es lo mismo que git branch --list

-.git branch "nombre de rama"  //Creamos una rama nueva

-.git checkout -b "nombre de rama" //Creamos una ramma y al mismo tiempo cambiamos a ella.

-.git commit --allow-empty -m 'mensaje de commit'  //Nos deja mandar un commit vacio esto con el fin de subir una nueva rama.

-.git push --set-upstream origin "nombre de rama nueva"  //Subimos una nueva rama al repositorio remoto.

-.git checkout "nombre de rama"  //Cabiamos de rama, nos movemos de rama.

-.git push origin :"nombre de rama" //Borra ramas remotas.

.-git brach / Para visualizar branch locales

-.git branch -r //Para visualizar ramas remotas

-.git branch -a  //Para visualizar las ramas locales y remotas.

-.git branch -m "rama que queremos cambiar nombre" "nuevo nombre de rama"  //Renombrar ramas locales.

-.git branch -D "nombre de rama"  //Borrado forzoso de una rama local.

-.git merge "nombre de rama a fusuinar"  //Fusionaos la rama que pongamos con la rama donde estamos posicinados

-.git pull  //Sirve para traer los cambios del repo remoto de todas las ramas al repo local.

.-git diff //Nos deja ver la diferencia entre los cambios echos en el ultimo commit

.-git diff (# commit) (# commit) //Nos muestra la diferencia entre ambos commits

-.git fetch  //Trae a staging area los cambios de las ramas remotas que an echo otros usuarios y no podemos verlos 

-.git log  //muestra todos los commit echos

.-git log --oneline | cat //Nos muestra loscommit en una sola linea pero como contenido

-.git log --oneline --graph --decorate --all  //Nos muestra todoos los commit en una linea, con graficos y decorados.

-.git commit --amend //Para agregar cambios en el ultimo commit (primero devemos agregar los cambios con "add") solo funciona con el ultimo commit.

-.git commit --amend -m "nuevo mensaje corregido"  //nos permite corregir el mensaje del commit anterior y tambien si agregamos el nombre de archivos o los creamos en el mismo mensaje se subiran el ultimo commit, solo funciona para el ultimo commit recien subido.

**************Comandos para revertir cambios en commits etc..**************

.-git revert "numero de commit"/ Revierte todos los cambios echos despues de ese commit aunque ya se halla enviado a remoto, elimina cambios, archivos etc.. en remoto y local.  

.-git checkout -- (nombre del archivo modificado) //Revierte los cambios "unstaged" de unarchivo, elimina todos los cambios echos en el archivo seleccionado, antes de usar "add".


*********Git reset solo funciona con cambios locales, osea con commits no pusheados a remoto*******

.-git reset HEAD (nombre del archivo o commit) //Regresa las modificaciones de ese archivo a "unstaged" 

.-git reset (# de commit) //Nos permite regresar en el tiempo a ese commit y todos los cambios echos anteriormente quedaran en "unstaged" ya solo terminamos de revertirlos totalmente con "git checkout --"

.-git reset --soft (# de commit) //nos permite regresar en el tiempo a ese commit pero conservando los cambios y archivos creados en "staging".

.-git reset --hard (# de commit) //Nos permite regresar a ese commit pero sin gurdar ninguna modificacion en  "staged" ni en "unstaged"  borra absolutamente todo el rastro de ese commit

ATENCION: Si utilizamos el comando (git reset) y borramos un commit que algien mas hizo o que se encuantre en otra rama nos meteremos en problemas al querer sincronizar nuestros repositorios remotos por que su repositorio  estaran adelantados con ese commit

.-git rebase "brach" / Permite traernos los cambios de una rama hacia otra de una manera mas directa Ejemplo: si estamos posisionados en la brach "main" y creamos un archivo con su debido commit y queremos traerlo hacia la brach "work", nos posisionamos en la rama "work"  que es donde queremos traer los cambios y solo ejecutamos "git rebase main" con eso traemos el archivo creado en main hacia work.

NOTA: Se recominda ocupar este comando de forma local, osea antes de pushear cualquier cambio.

.- git ignore / Es un archivo que se crea en un repositorio de git par poder hacer exclusiones de algunos archivos, se crea de la siguiente manera 'touch .gitignore' y todo lo que contenga dentro de el se ignorara al momento de subir cambios al repositorio remoto.

.- git rm --cached "nombre del archivo" / Borra el archivo del repo remoto

.- git rm --cached "nombre del archivo" --f / Borra forsozamente el archivo del repo remoto

******Generacion de llaves SSH en Git******

.-ssh-keygen -t ed25519 -C "Colocas un Mail" / Posterior te dira que si la quiers generar en la doreccion donde estas posicionado solo das enter, regularmente te crea un archivo Publisher Microsoft en esta direciion C:\Users\Emman\.ssh

.- despues solo vas a configuraciones de Github y vas al apartado de SSH and GPG Keys  y damos en new SSH key y ahi ingresamos las llave y le damos un nombre, la llave suelel verse de esta manera: SHA256:mniDbNf71pQDwfs7iIBiF1LJ9ztFYHPfwxZG5tBfNws


				---------------Errores en Git-----------------

.-Cuando los "$ git push -u origin main"  y nos sale este error es porque existen unos cambios en el repositorio remoto que nosotros no subimos, asi que lo que nos dice que tenemos que hacer es ejecutar el comando "git pull origin 'branch'", con este comando nos traemos esos cambios a nustro repositorio remoto.

$ git push -u origin main

To https://github.com/Emmanuelvp88/First-Website.git
 ! [rejected]        main -> main (fetch first)
error: failed to push some refs to 'https://github.com/Emmanuelvp88/First-Websit
e.git'
hint: Updates were rejected because the remote contains work that you do not
hint: have locally. This is usually caused by another repository pushing to
hint: the same ref. If you want to integrate the remote changes, use
hint: 'git pull' before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.


.-Ejecutamos el comando "git pull origin 'branch'" si en una rama nos deja jalar los cambios del remoto y en otra no como lo vemos a continuacion.

$ git pull

remote: Enumerating objects: 38, done.
remote: Counting objects: 100% (38/38), done.
remote: Compressing objects: 100% (31/31), done.
remote: Total 38 (delta 12), reused 33 (delta 7), pack-reused 0
Unpacking objects: 100% (38/38), 664.36 KiB | 304.00 KiB/s, done.
From https://github.com/Emmanuelvp88/First-Website
 * [new branch]      main       -> origin/main
 * [new branch]      work       -> origin/work
There is no tracking information for the current branch.
Please specify which branch you want to merge with.
See git-pull(1) for details.

    git pull <remote> <branch>

If you wish to set tracking information for this branch you can do so with:

    git branch --set-upstream-to=origin/<branch> work

	

	
.-Este erreo nos sale cuando no nos deja hacer un "git pull" normalmete, esto se debe aque las historias de commits son diferentes
y marca el siginte error.

$ git pull
	From https://github.com/Emmanuelvp88/Portfolio
	 * [new branch]      prueba     -> origin/prueba
	fatal: refusing to merge unrelated histories


***Solucion definitiva****

.-Para corregir el error anterior, necesitamos usar la opción –allow-un related-histories después del comando git pull <remote> <branch> , donde <remoto> es la URL del repositorio remoto o su nombre corto de origen
<branch> es el nombre de la rama que nos gustaría fusionar

Por ejemplo :  $ git pull origin main --allow-unrelated-histories

.- Ejecutamos el siguiente comando "git pull origin master --allow-unrelated-histories"  //este comando es para solucionar que no nos deja hacer un pull normal

	

.- El flujo normal de git en las branch si tenemos 3 brach, 'main', 'work', 'desarrollo', podemos modificar archivos en cualquiera de las brach, pero no podemos hacer "merge" y fusionar lso cambios con alguna otra rama si no guardamos los cambios ,hacemos commit y subimos los cambios al repositorio remoto primero, una vez echo esto podemos posicionarnos en cualquier otra brach y hacer merge de la branch donde subimos los cambios y unir esos cambios con la branch actual donde estamos posicionados, Ejemplo: si creamos o modificamos un archivo en la rama "desarrollo" tenemos primero que dejar todo limpio y subido en el repo remoto,  posterior nos pasamos a la branch "work" para poder unir los cambios de la rama "desarrollo" usando el comando 'git merge desarrollo' posterior a eso tenemos que hacer "push" para subir esos cambios en el repo remoto.



