

-------Estos comandos que debemos utilizar para sincronizar un repo local con archivos ya hechos, con un repo remoto.-------

-.git init   //inicializamos un repo

-.git status  //Vemos el estatus del repo

-.git add .  //Agregamos todos los cambios hechos a los archivos o archivos nuevos añadidos lo subimos a StagingArea.

-.git commit -m "mensaje"  //Mandamos un commit con un mensaje Referencial de lo que queremos subir.

-.git branch -M main  //Nos aseguramos de que estos cambios que vamos a subir se valla a la rama que queremos, en este caso es la rama main.

-.git remote add origin https://github.com/Emmanuelvp88/Curso-CSS.git  //Seleccionamos el link del repositorio remoto.

-.git push -u origin main  //Empujamos los cambios ya agregados y commiteados al repositorio remoto.

-.git remote -v //Nos muestra el nombre del repositorio remoto con el que esta sincronizado nuestro repo local.


----------Comandos basicos en Git------------
-.touch "archivo.extencion" //Creamos diferentes tipos de archivos nuevos dependiendo su extencion

-.touch "Achivo.txt" && "archivo.html" && "archivo.css" && "archivo.js" //Podemos crear muchos archivos a la vez

-.

-.

-.

----------------Ramas (Branch)-----------

-.git branch  //Sirve para ver cuantas ramas tenemos en nuestro repo es lo mismo que git branch --list

-.git branch "nombre de rama"  //Creamos una rama nueva

-.git checkout -b "nombre de rama" //Creamos una rama y al mismo tiempo cambiamos a ella.

-.git push --set-upstream origin "nombre de rama nueva"  //Subimos una nueva rama al repositorio remoto.

-.git checkout "nombre de rama"  //Cabíamos de rama, nos movemos de rama.

-.git branch -D "nombre de rama"  //Borrado forzoso de una rama local.
 
-.git push origin :"nombre de rama" //Borra ramas remotas.

-.git branch -r //Para visualizar ramas remotas

-.git branch -a  //Para visualizar las ramas locales y remotas.

-.git branch -m "nombre de rama que queremos cambiar nombre" "nombre nuevo de rama"  //Renombrar ramas locales.

-.git merge "nombre de rama a fusionar"  //Fusionaos la rama que nombremos, con la rama donde estamos parados.

-.git pull  //Sirve para jalar todos los cambios remotos de todas las ramas al repo local.

.-git diff //Nos deja ver la diferencia entre los cambios hechos en el ultimo commit

.-git diff (# commit) (# commit) //Nos muestra la diferencia entre ambos commits

-.git fetch  //Trae a staging las ramas o cambios que han echo otros usuarios y no podemos verlos 

-.git log  //muestra todos los commit hechos

.-git log --oneline | cat //Nos muestra loscommit en una sola linea pero como contenido

-.git log --oneline --graph --decorate --all  //Nos muestra todoos los commit en una linea, con gráficos y decorados.

-.git commit --allow-empty -m 'mensaje de commit'  //Nos deja mandar un commit vacío esto con el fin de subir una nueva rama.

-.git commit --amend -m "nuevo mensaje corregido"  //nos permite corregir el mensaje del commit anterior, solo funciona para el ultimo commit.

-.git commit --amend //Para agregar algunos cambios en el ultimo commit (primero devemos agregar los cambios con "add") solo funciona con el ultimo commit.

-.git remote show origin: Este comando muestra información más detallada sobre el repositorio remoto origin, incluyendo las ramas asociadas y los extremos conectados. 

-.git remote add <nombre> <URL>: Este comando agrega un nuevo repositorio remoto a tu repositorio local.
 
-.git remote set-url <nombre> <URL>: Este comando cambia la URL de un repositorio remoto existente.
 
-.git remote rm <nombre>: Este comando elimina un repositorio remoto de tu repositorio local. 


-------------------- Comandos Delicados de Git ---------------------

.-git checkout -- (nombre del archivo modificado) //Revierte los cambios "unstaged" de un archivo, elimina todos los cambios que hechos en un archivo antes de usar "add", ósea revierte los cambios localmente.

.-git reset HEAD (nombre del archivo) //Regresa las modificaciones a "unstaged" 

.-git reset (# de commit) //Nos permite regresar en el tiempo a ese commit y todos los cambios echos anteriormente quedaran en "unstaged" ya solo terminamos de revertirlos totalmente con "git checkout --"

.-git reset --soft (# de commit) //nos permite regresar a ese commit pero conservando los cambios en "staging" de los otros commits.

.-git reset --hard (# de commit) //Nos permite regresar a ese commit pero sin guardar ninguna modificación en  "staged" ni en "unstaged"  borra todo el rastro de los demás commits que estaban arriba del commit al que nos movimos.

ATENCION: Si utilizamos el comando (GIT RESET) y borramos un commit que alguien mas hizo o que se encuantre en otra rama nos meteremos en problemas al querer sincronizar nuestros repositorios remotos por que su repositorio  estarán adelantados con ese commit

---------------Errores en Git-----------------
-.Este error se soluciona con el siguiente comando, cuando no nos deja hacer un pull normal.

ERROR:  $ git pull
	From https://github.com/Emmanuelvp88/Portfolio
	 * [new branch]      prueba     -> origin/prueba
	fatal: refusing to merge unrelated histories

SOLUCION: git pull origin master --allow-unrelated-histories


-.Ese error significa que el rebase se rompió o quedó en un estado extraño, posiblemente por algún error anterior o por haber modificado archivos internos de Git sin querer.


ERROR:  warning: could not read '.git/rebase-merge/head-name': No such file or directory.

Borrar la carpeta manualmente del rebase fallido:
SOLUCION: rm -rf .git/rebase-merge

Luego verifica que todo esté bien: git status

Si todo está claro, puedes intentar de nuevo el rebase o hacer git pull normal (sin rebase): git pull origin main


-. Hay varias razones por las que los commits que subes a GitHub no aparecen en tu gráfico de contribuciones (el de los cuadritos verdes).

ERROR: Los commits no se reflejan en el gráfico de contribuciones en los cuadritos verdes

SOLUCION:  Tu correo en los commits no coincide con el de tu cuenta de GitHub
GitHub solo cuenta los commits si el correo que usaste para hacerlos está asociado a tu cuenta.

Para revisar qué correo estás usando en Git, corre esto: git config user.email
posterior chekcar que coincidan con el de los commit: git log

Si ese correo no es el mismo que tienes en tu perfil de GitHub, los commits no contarán como tuyos.

Asegúrate de que esté bien configurado: git config --global user.email "tucorreo@ejemplo.com"

Ese correo debe estar en tu cuenta de GitHub (puedes agregarlo en tu configuración de emails).


-. Ese error significa que el repositorio remoto (en GitHub) tiene commits que tú no tienes en tu copia local, así que Git no te deja hacer push porque podrías sobreescribir esos cambios.

ERROR: https://github.com/Emmanuelvp88/Portafolio01.git
 ! [rejected]        HEAD -> main (non-fast-forward)
error: failed to push some refs to 'https://github.com/Emmanuelvp88/Portafolio01.git'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. If you want to integrate the remote changes,
hint: use 'git pull' before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.

CAUSA:

Trabajaste desde otra computadora.
Alguien más hizo cambios en el repositorio.
O tú mismo hiciste cambios desde GitHub (como editar archivos directamente en la web).

SOLUCION: Opción rápida y segura (sin sobrescribir nada): git pull origin main --rebase
Eso trae los cambios del repositorio remoto y pone tus commits encima (como si hubieras trabajado después de esos cambios).

Después de que eso termine bien, haces:

git push origin main
⚠️ ¿Y si no quieres rebase?
También puedes hacer git pull sin rebase:git pull origin main
Pero eso puede generar un commit de merge si hay diferencias, y tu historial se verá más desordenado. La opción --rebase es más limpia.


❌ ¿Y si quieres ignorar los cambios del repo remoto?
Si estás seguro de que quieres forzar tu versión, usa: git push origin main --force
⚠️ Esto sobrescribe lo que haya en GitHub, así que ten cuidado. No se recomienda a menos que sepas exactamente lo que estás haciendo.
